devtools::install_github('rstudio/blogdown')
install.packages("devtools")
library(devtools)
devtools::install_github('rstudio/blogdown')
library(mvtnorm)
CorrelatedXY <- function(N, mean1,mean2,
variance1,variance2,
correlation)
{
corvar <- correlation * sqrt(variance1*variance2)
rmvnorm(n=N,mean=c(mean1,mean2),
sigma=matrix(c(variance1, corvar,
corvar, variance2), 2,2))
}
N <- 1000
mean1 <- 2
mean2 <- 5
variance1 <- 1
variance2 <- 2
N <- 1000
mean1 <- 2
mean2 <- 5
variance1 <- 1
variance2 <- 2
set.seed(17)
Raw <- CorrelatedXY(N, mean1, mean2, variance1, variance2, 0.0)
View(Raw)
View(Raw)
Raw[,1]
mean(Raw[,1])
mean(Raw[,2])
var(Raw[,2])
var(Raw[,1])
cor(Raw[,1],Raw[,2])
for (i in 1:5)
{
Raw <- cbind(Raw, CorrelatedXY(N, mean1, mean2,
variance1, variance2,
(-1)^i * 0.2*i) )
}
cbind(i,(-1)^i * 0.2*i))
i<-1:5
cbind(i,(-1)^i * 0.2*i))
cbind(i,(-1)^i * 0.2*i)
colnames(Raw) <- paste(rep(c("P", "P", "M", "M"), 3),
sprintf("%2.2d", c(0,0,2,2,4,4,6,6,8,8,10,10)),
rep( c("A", "B"), 6), sep="")
View(Raw)
corRaw <- cor(Raw)
library(spatstat) # "im" function
install.packages("spatstat")
library(spatstat) # "im" function
plot(im(corRaw[nrow(corRaw):1,]), main="Correlation Matrix Map")
corRaw
round( cor(Raw), 4)
?im
plot(im(corRaw[nrow(corRaw):1,]), main="Correlation Matrix Map")
library(mvtnorm)
# Based on R-News posting by Robin Hankin, 16 Dec 2005
# http://tolstoy.newcastle.edu.au/R/help/05/12/17693.html
CorrelatedXY <- function(N, mean1,mean2,
variance1,variance2,
correlation)
{
corvar <- correlation * sqrt(variance1*variance2)
rmvnorm(n=N,mean=c(mean1,mean2),
sigma=matrix(c(variance1, corvar,
corvar, variance2), 2,2))
}
N <- 1000
mean1 <- 2
mean2 <- 5
variance1 <- 1
variance2 <- 2
set.seed(17)
Raw <- CorrelatedXY(N, mean1, mean2, variance1, variance2, 0.0)
for (i in 1:5)
{
Raw <- cbind(Raw, CorrelatedXY(N, mean1, mean2,
variance1, variance2,
(-1)^i * 0.2*i) )
}
colnames(Raw) <- paste(rep(c("P", "P", "M", "M"), 3),
sprintf("%2.2d", c(0,0,2,2,4,4,6,6,8,8,10,10)),
rep( c("A", "B"), 6), sep="")
### corrleation matrix
corRaw <- cor(Raw)
round(corRaw, 4)
library(spatstat) # "im" function
plot(im(corRaw[nrow(corRaw):1,]), main="Correlation Matrix Map")
library(mvtnorm)
# Based on R-News posting by Robin Hankin, 16 Dec 2005
# http://tolstoy.newcastle.edu.au/R/help/05/12/17693.html
CorrelatedXY <- function(N, mean1,mean2,
variance1,variance2,
correlation)
{
corvar <- correlation * sqrt(variance1*variance2)
rmvnorm(n=N,mean=c(mean1,mean2),
sigma=matrix(c(variance1, corvar,
corvar, variance2), 2,2))
}
N <- 1000
mean1 <- 2
mean2 <- 5
variance1 <- 1
variance2 <- 2
set.seed(17)
Raw <- CorrelatedXY(N, mean1, mean2, variance1, variance2, 0.0)
for (i in 1:5)
{
Raw <- cbind(Raw, CorrelatedXY(N, mean1, mean2,
variance1, variance2,
(-1)^i * 0.2*i) )
}
colnames(Raw) <- paste(rep(c("P", "P", "M", "M"), 3),
sprintf("%2.2d", c(0,0,2,2,4,4,6,6,8,8,10,10)),
rep( c("A", "B"), 6), sep="")
### corrleation matrix
corRaw <- cor(Raw)
#round(corRaw, 4)
library(spatstat) # "im" function
plot(im(corRaw[nrow(corRaw):1,]), main="Correlation Matrix Map")
library(mvtnorm)
# Based on R-News posting by Robin Hankin, 16 Dec 2005
# http://tolstoy.newcastle.edu.au/R/help/05/12/17693.html
CorrelatedXY <- function(N, mean1,mean2,
variance1,variance2,
correlation)
{
corvar <- correlation * sqrt(variance1*variance2)
rmvnorm(n=N,mean=c(mean1,mean2),
sigma=matrix(c(variance1, corvar,
corvar, variance2), 2,2))
}
N <- 1000
mean1 <- 2
mean2 <- 5
variance1 <- 1
variance2 <- 2
set.seed(17)
Raw <- CorrelatedXY(N, mean1, mean2, variance1, variance2, 0.0)
for (i in 1:5)
{
Raw <- cbind(Raw, CorrelatedXY(N, mean1, mean2,
variance1, variance2,
(-1)^i * 0.2*i) )
}
colnames(Raw) <- paste(rep(c("P", "P", "M", "M"), 3),
sprintf("%2.2d", c(0,0,2,2,4,4,6,6,8,8,10,10)),
rep( c("A", "B"), 6), sep="")
### corrleation matrix
corRaw <- cor(Raw)
#round(corRaw, 4)
library(spatstat) # "im" function
plot(im(corRaw[nrow(corRaw):1,]), main="Correlation Matrix Map")
library(mvtnorm)
# Based on R-News posting by Robin Hankin, 16 Dec 2005
# http://tolstoy.newcastle.edu.au/R/help/05/12/17693.html
CorrelatedXY <- function(N, mean1,mean2,
variance1,variance2,
correlation)
{
corvar <- correlation * sqrt(variance1*variance2)
rmvnorm(n=N,mean=c(mean1,mean2),
sigma=matrix(c(variance1, corvar,
corvar, variance2), 2,2))
}
N <- 1000
mean1 <- 2
mean2 <- 5
variance1 <- 1
variance2 <- 2
set.seed(17)
Raw <- CorrelatedXY(N, mean1, mean2, variance1, variance2, 0.0)
for (i in 1:5)
{
Raw <- cbind(Raw, CorrelatedXY(N, mean1, mean2,
variance1, variance2,
(-1)^i * 0.2*i) )
}
colnames(Raw) <- paste(rep(c("P", "P", "M", "M"), 3),
sprintf("%2.2d", c(0,0,2,2,4,4,6,6,8,8,10,10)),
rep( c("A", "B"), 6), sep="")
### corrleation matrix
corRaw <- cor(Raw)
#round(corRaw, 4)
library(spatstat) # "im" function
plot(im(corRaw[nrow(corRaw):1,]), main="Correlation Matrix Map")
library(mvtnorm)
# Based on R-News posting by Robin Hankin, 16 Dec 2005
# http://tolstoy.newcastle.edu.au/R/help/05/12/17693.html
CorrelatedXY <- function(N, mean1,mean2,
variance1,variance2,
correlation)
{
corvar <- correlation * sqrt(variance1*variance2)
rmvnorm(n=N,mean=c(mean1,mean2),
sigma=matrix(c(variance1, corvar,
corvar, variance2), 2,2))
}
N <- 1000
mean1 <- 2
mean2 <- 5
variance1 <- 1
variance2 <- 2
set.seed(17)
Raw <- CorrelatedXY(N, mean1, mean2, variance1, variance2, 0.0)
for (i in 1:5)
{
Raw <- cbind(Raw, CorrelatedXY(N, mean1, mean2,
variance1, variance2,
(-1)^i * 0.2*i) )
}
colnames(Raw) <- paste(rep(c("P", "P", "M", "M"), 3),
sprintf("%2.2d", c(0,0,2,2,4,4,6,6,8,8,10,10)),
rep( c("A", "B"), 6), sep="")
### corrleation matrix
corRaw <- cor(Raw)
#round(corRaw, 4)
library(spatstat) # "im" function
plot(im(corRaw[nrow(corRaw):1,]), main="Correlation Matrix Map")
plot(im(corRaw[nrow(corRaw):1,]), main="Correlation Matrix Map")
dissimilarity <- 1 - cor(Raw)
distance <- as.dist(dissimilarity)
round(distance, 4)
plot(hclust(distance), main="Dissimilarity = 1 - Correlation", xlab="")
plot(hclust(distance), main="Dissimilarity = 1 - Correlation", xlab="")
round(distance, 4)
library(mvtnorm)
# Based on R-News posting by Robin Hankin, 16 Dec 2005
# http://tolstoy.newcastle.edu.au/R/help/05/12/17693.html
CorrelatedXY <- function(N, mean1,mean2,
variance1,variance2,
correlation)
{
corvar <- correlation * sqrt(variance1*variance2)
rmvnorm(n=N,mean=c(mean1,mean2),
sigma=matrix(c(variance1, corvar,
corvar, variance2), 2,2))
}
N <- 1000
mean1 <- 2
mean2 <- 5
variance1 <- 1
variance2 <- 2
set.seed(17)
Raw <- CorrelatedXY(N, mean1, mean2, variance1, variance2, 0.0)
for (i in 1:5)
{
Raw <- cbind(Raw, CorrelatedXY(N, mean1, mean2,
variance1, variance2,
(-1)^i * 0.2*i) )
}
colnames(Raw) <- paste(rep(c("P", "P", "M", "M"), 3),
sprintf("%2.2d", c(0,0,2,2,4,4,6,6,8,8,10,10)),
rep( c("A", "B"), 6), sep="")
### corrleation matrix
corRaw <- cor(Raw)
#round(corRaw, 4)
library(spatstat) # "im" function
plot(im(corRaw[nrow(corRaw):1,]), main="Correlation Matrix Map")
round(corRaw, 4)
dissimilarity <- 1 - cor(Raw)
distance <- as.dist(dissimilarity)
round(distance, 4)
plot(hclust(distance), main="Dissimilarity = 1 - Correlation", xlab="")
plot(hclust(distance), main="Dissimilarity = 1 - Correlation", xlab="")
dissimilarity <- 1 - abs(cor(Raw))
distance <- as.dist(dissimilarity)
#round(distance, 4)
plot(hclust(distance), main="Dissimilarity = 1 - Correlation", xlab="")
install.packages("Hmisc")
library(Hmisc)
plot( varclus(Raw, similarity="spearman") )
plot( varclus(Raw, similarity="pearson") )
log(0.0001)
myNestedList <- list(A = list(`0` = c(`1` = 10, `2` = 20, `3` = 30, `4` = 72),
`1` = c(`1` = 15, `2` = 9, `3` = 7)),
B = list(`0` = c(A = 11, B = 12, C = 13),
`1` = c(X = 14, Y = 15, Z = 16)))
myNestedList
